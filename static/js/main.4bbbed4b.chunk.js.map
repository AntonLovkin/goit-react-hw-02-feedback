{"version":3,"sources":["components/Statistics.js","components/FeedbackOptions.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","Object","entries","map","entry","defaultProps","FeedbackOptions","options","onLeaveFeedback","keys","key","type","onClick","App","state","incrementValue","value","setState","prevState","countTotalFeedback","values","reduce","countPositiveFeedbackPercentage","positiveFeedback","Math","floor","console","log","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAAA,SAASA,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,qCACE,4CACCD,GAAS,EACR,qCACE,6BACGE,OAAOC,QAAQ,CAAEN,OAAMC,UAASC,QAAOK,KAAI,SAACC,GAAD,OAC1C,+BACGA,EAAM,GADT,KACeA,EAAM,KADZA,EAAM,SAKnB,uCAAUL,KACV,oDAAuBC,EAAvB,WAGF,sDAMRL,EAAWU,aAAe,CACxBL,mBAAoB,EACpBD,MAAO,GAaMJ,QCAAW,EAtCS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,6BACGP,OAAOQ,KAAKF,GAASJ,KAAI,SAACO,GAAD,OACxB,6BACE,wBAAQC,KAAK,SAASC,QAAS,kBAAMJ,EAAgBE,IAArD,SACGA,KAFIA,SC2DAG,E,4MAzDbC,MAAQ,CACNlB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPiB,eAAiB,SAACC,GAChB,EAAKC,UAAS,SAACC,GACb,OAAO,eAAGF,EAAQE,EAAUF,GAAS,O,EAIzCG,mBAAqB,WAMnB,OALclB,OAAOmB,OAAO,EAAKN,OAAOO,QACtC,SAACtB,EAAOiB,GAAR,OAAkBjB,EAAQiB,IAC1B,I,EAMJM,gCAAkC,WAChC,IACIC,EADI3B,EAAS,EAAKkB,MAAdlB,KAQR,OALE2B,EADgC,IAA9B,EAAKJ,qBACY,EAEAK,KAAKC,MAAc,IAAP7B,EAAc,EAAKuB,sBAEpDO,QAAQC,IAAIJ,GACLA,G,4CAGT,WAGE,OACE,qCACE,uDAEA,cAAC,EAAD,CACEhB,QAASqB,KAAKd,MACdN,gBAAiBoB,KAAKb,iBAGxB,cAAC,EAAD,CACEnB,KAAMgC,KAAKd,MAAMlB,KACjBC,QAAS+B,KAAKd,MAAMjB,QACpBC,IAAK8B,KAAKd,MAAMhB,IAChBC,MAAO6B,KAAKT,qBACZnB,mBAAoB4B,KAAKN,2C,GAnDjBO,aCQHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4bbbed4b.chunk.js","sourcesContent":["function Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <>\n      <h2>Statistics</h2>\n      {total >= 1 ? (\n        <>\n          <ul>\n            {Object.entries({ good, neutral, bad }).map((entry) => (\n              <li key={entry[0]}>\n                {entry[0]}: {entry[1]}\n              </li>\n            ))}\n          </ul>\n          <p>Total:{total}</p>\n          <p>Positive Feedback: {positivePercentage} %</p>\n        </>\n      ) : (\n        <h2>No feedback given</h2>\n      )}\n    </>\n  );\n}\n\nStatistics.defaultProps = {\n  positivePercentage: 0,\n  total: 0,\n};\n\n// Statistics.propTypes = {\n//     name: PropTypes.string,\n//   tag: PropTypes.string.isRequired,\n//   location: PropTypes.string.isRequired,\n//   avatar: PropTypes.string.isRequired,\n//   followers: PropTypes.number.isRequired,\n//   views: PropTypes.number.isRequired,\n//   likes: PropTypes.number.isRequired,\n// }\n\nexport default Statistics;\n","const FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <ul>\n    {Object.keys(options).map((key) => (\n      <li key={key}>\n        <button type=\"button\" onClick={() => onLeaveFeedback(key)}>\n          {key}\n        </button>\n      </li>\n    ))}\n  </ul>\n\n  // <div>\n  //   <button type=\"button\" onClick={this.onLeaveFeedback}>\n  //     Good\n  //   </button>\n  //   <button type=\"button\" onClick={this.onLeaveFeedback}>\n  //     Neutral\n  //   </button>\n  //   <button type=\"button\" onClick={this.onLeaveFeedback}>\n  //     Bad\n  //   </button>\n  // </div>\n);\n\n// FeedbackOptions.defaultProps = {\n//     name: \"User Name\",\n// };\n\n// FeedbackOptions.propTypes = {\n//     name: PropTypes.string,\n//   tag: PropTypes.string.isRequired,\n//   location: PropTypes.string.isRequired,\n//   avatar: PropTypes.string.isRequired,\n//   followers: PropTypes.number.isRequired,\n//   views: PropTypes.number.isRequired,\n//   likes: PropTypes.number.isRequired,\n// }\n\nexport default FeedbackOptions;\n","import { Component } from \"react\";\nimport Statistics from \"./components/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  incrementValue = (value) => {\n    this.setState((prevState) => {\n      return { [value]: prevState[value] + 1 };\n    });\n  };\n\n  countTotalFeedback = () => {\n    const total = Object.values(this.state).reduce(\n      (total, value) => total + value,\n      0\n    );\n    // console.log(total);\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    let positiveFeedback;\n    if (this.countTotalFeedback() === 0) {\n      positiveFeedback = 0;\n    } else {\n      positiveFeedback = Math.floor((good * 100) / this.countTotalFeedback());\n    }\n    console.log(positiveFeedback);\n    return positiveFeedback;\n  };\n\n  render() {\n    // const { good, neutral, bad, total = 0, positive = 0 } = this.state;\n\n    return (\n      <>\n        <h2>Please leave feedback</h2>\n\n        <FeedbackOptions\n          options={this.state}\n          onLeaveFeedback={this.incrementValue}\n        />\n\n        <Statistics\n          good={this.state.good}\n          neutral={this.state.neutral}\n          bad={this.state.bad}\n          total={this.countTotalFeedback()}\n          positivePercentage={this.countPositiveFeedbackPercentage()}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n\n// import ReactDOM from \"react-dom\";\n// import Counter from \"./components/Feedback\";\n\n// const App = () => (\n//   <div>\n//     <Counter />\n//   </div>\n// );\n\n// handleIncrementGood = () => {\n//   this.setState((prevState) => {\n//     return {\n//       good: prevState.good + 1,\n//     };\n//   });\n// };\n\n// handleIncrementNeutral = () => {\n//   this.setState((prevState) => {\n//     return {\n//       neutral: prevState.neutral + 1,\n//     };\n//   });\n// };\n// handleIncrementBad = () => {\n//   this.setState((prevState) => {\n//     return {\n//       bad: prevState.bad + 1,\n//     };\n//   });\n// };\n\n// <button type=\"button\" onClick={this.handleIncrementGood}>\n//           Good\n//         </button>\n//         <button type=\"button\" onClick={this.handleIncrementNeutral}>\n//           Neutral\n//         </button>\n//         <button type=\"button\" onClick={this.handleIncrementBad}>\n//           Bad\n//         </button>\n\n// this.setState((prevState) => {\n//   return {\n//     total: prevState.good + prevState.neutral + prevState.bad,\n//   };\n// });\n\n// <div onClick={this.countPositiveFeedbackPercentage}>\n// <div onClick={this.countTotalFeedback}></div>\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
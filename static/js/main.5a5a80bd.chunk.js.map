{"version":3,"sources":["components/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","defaultProps","App","state","handleIncrementGood","setState","prevState","handleIncrementNeutral","handleIncrementBad","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","onClick","this","type","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAEMA,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,gCACE,4CACA,sCACO,+BAAOJ,OAEd,yCACU,+BAAOC,OAEjB,qCACM,+BAAOC,OAEb,uCACQ,+BAAOC,OAEf,mDACoB,iCAAOC,EAAP,cAKxBL,EAAWM,aAAe,CACxBD,mBAAoB,EACpBD,MAAO,GAaMJ,QCgDAO,E,4MAjFbC,MAAQ,CACNP,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPM,oBAAsB,WACpB,EAAKC,UAAS,SAACC,GACb,MAAO,CACLV,KAAMU,EAAUV,KAAO,O,EAI7BW,uBAAyB,WACvB,EAAKF,UAAS,SAACC,GACb,MAAO,CACLT,QAASS,EAAUT,QAAU,O,EAInCW,mBAAqB,WACnB,EAAKH,UAAS,SAACC,GACb,MAAO,CACLR,IAAKQ,EAAUR,IAAM,O,EAK3BW,mBAAqB,WACnB,EAAKJ,UAAS,SAACC,GACb,MAAO,CACLP,MAAOO,EAAUV,KAAOU,EAAUT,QAAUS,EAAUR,S,EAK5DY,gCAAkC,WAChC,EAAKL,UAAS,SAACC,GACb,MAAO,CACLN,mBAAoBW,KAAKC,MACtBN,EAAUV,MACRU,EAAUT,QAAUS,EAAUR,IAAMQ,EAAUV,MAC/C,U,4CAMV,WAGE,OACE,qBAAKiB,QAASC,KAAKJ,gCAAnB,SACE,sBAAKG,QAASC,KAAKL,mBAAnB,UAGE,uDAIA,wBAAQM,KAAK,SAASF,QAASC,KAAKV,oBAApC,kBAGA,wBAAQW,KAAK,SAASF,QAASC,KAAKP,uBAApC,qBAGA,wBAAQQ,KAAK,SAASF,QAASC,KAAKN,mBAApC,iBAGA,cAAC,EAAD,CACEZ,KAAMkB,KAAKX,MAAMP,KACjBC,QAASiB,KAAKX,MAAMN,QACpBC,IAAKgB,KAAKX,MAAML,IAChBC,MAAOe,KAAKX,MAAMJ,MAClBC,mBAAoBc,KAAKX,MAAMH,8B,GA1EzBgB,aCQHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5a5a80bd.chunk.js","sourcesContent":["import { Component } from \"react\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <div>\n    <h2>Statistics</h2>\n    <p>\n      Good:<span>{good}</span>\n    </p>\n    <p>\n      Neutral:<span>{neutral}</span>\n    </p>\n    <p>\n      Bad:<span>{bad}</span>\n    </p>\n    <p>\n      Total:<span>{total}</span>\n    </p>\n    <p>\n      Positive feedback:<span>{positivePercentage}%</span>\n    </p>\n  </div>\n);\n\nStatistics.defaultProps = {\n  positivePercentage: 0,\n  total: 0,\n};\n\n// Statistics.propTypes = {\n//     name: PropTypes.string,\n//   tag: PropTypes.string.isRequired,\n//   location: PropTypes.string.isRequired,\n//   avatar: PropTypes.string.isRequired,\n//   followers: PropTypes.number.isRequired,\n//   views: PropTypes.number.isRequired,\n//   likes: PropTypes.number.isRequired,\n// }\n\nexport default Statistics;\n","import { Component } from \"react\";\nimport Statistics from \"./components/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  handleIncrementGood = () => {\n    this.setState((prevState) => {\n      return {\n        good: prevState.good + 1,\n      };\n    });\n  };\n  handleIncrementNeutral = () => {\n    this.setState((prevState) => {\n      return {\n        neutral: prevState.neutral + 1,\n      };\n    });\n  };\n  handleIncrementBad = () => {\n    this.setState((prevState) => {\n      return {\n        bad: prevState.bad + 1,\n      };\n    });\n  };\n\n  countTotalFeedback = () => {\n    this.setState((prevState) => {\n      return {\n        total: prevState.good + prevState.neutral + prevState.bad,\n      };\n    });\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    this.setState((prevState) => {\n      return {\n        positivePercentage: Math.round(\n          (prevState.good /\n            (prevState.neutral + prevState.bad + prevState.good)) *\n            100\n        ),\n      };\n    });\n  };\n\n  render() {\n    // const { good, neutral, bad, total = 0, positive = 0 } = this.state;\n\n    return (\n      <div onClick={this.countPositiveFeedbackPercentage}>\n        <div onClick={this.countTotalFeedback}>\n          {/* <Section title=\"No feedback info\"></Section> */}\n\n          <h2>Please leave feedback</h2>\n\n          {/* <FeedbackOptions options={ } onLeaveFeedback={ }/> */}\n\n          <button type=\"button\" onClick={this.handleIncrementGood}>\n            Good\n          </button>\n          <button type=\"button\" onClick={this.handleIncrementNeutral}>\n            Neutral\n          </button>\n          <button type=\"button\" onClick={this.handleIncrementBad}>\n            Bad\n          </button>\n          <Statistics\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n            total={this.state.total}\n            positivePercentage={this.state.positivePercentage}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// import ReactDOM from \"react-dom\";\n// import Counter from \"./components/Feedback\";\n\n// const App = () => (\n//   <div>\n//     <Counter />\n//   </div>\n// );\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}